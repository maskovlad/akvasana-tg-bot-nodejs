const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");
const prisma = require('../lib/prisma')
const nodemailer = require("nodemailer");

module.exports = orderScene = new WizardScene(
  "order",
  // —Ä–∞–π–æ–Ω
  async (ctx) => {
    console.log('Bot started!!!')
    try {
      ctx.session.regionsData = await prisma.akvasanaRegions.findMany({
        where: { minQty: { not: 0 } },
      });
      const regions = ctx.session.regionsData.map(
        (region) => region.regionName
      );

      ctx.session.orderData = {};
      await ctx.replyWithHTML(
        "<b>–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä–∞–π–æ–Ω</b>",
        Markup.keyboard(regions).oneTime().resize().extra()
      );
      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä–∞–π–æ–Ω—É", e);
    }
  },
  // –∞–¥—Ä–µ—Å–∞
  async (ctx) => {
    try {
      // –¥–∞–Ω—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–∞–π–æ–Ω—É
      ctx.session.selectedRegion = ctx.session.regionsData.find(
        (o) => o.regionName === ctx.update.message.text
      );

      ctx.session.orderData.total = ctx.session.selectedRegion?.cost;

      ctx.session.orderData.regionName = ctx.update.message.text;
      await ctx.replyWithHTML(
        `<i>–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –±—É—Ç–ª—è 19,5–ª –¥–æ –≤–∞—à–æ–≥–æ —Ä–∞–π–æ–Ω—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å</i> ${ctx.session.selectedRegion.cost}–≥—Ä–Ω. <i>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∑–∞–∫–∞–∑, –±—É—Ç–ª—ñ–≤ - ${ctx.session.selectedRegion.minQty} —à—Ç</i>\n<b>–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É</b>`,
        {
          reply_markup: { remove_keyboard: true },
        }
      );
      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä–∞–π–æ–Ω—É 2: ", e);
    }
  },
  // —Ç–µ–ª–µ—Ñ–æ–Ω
  async (ctx) => {
    try {
      ctx.session.orderData.address = ctx.update.message.text;
      await ctx.replyWithHTML("<b>–í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω</b>");
      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω—É", e);
    }
  },
  // —á–∏ –∫–ª—ñ—î–Ω—Ç
  async (ctx) => {
    try {
      ctx.session.orderData.phone = ctx.update.message.text;
      await ctx.replyWithHTML(
        "<b>–ß–∏ —î –≤–∏ –Ω–∞—à–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º?</b>",
        Markup.keyboard([["–¢–∞–∫", "–ù—ñ"]])
          .resize()
          .extra()
      );
      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–ª—ñ—î–Ω—Ç —á–∏ –Ω—ñ", e);
    }
  },
  // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É—Ç–ª—ñ–≤
  async (ctx) => {
    try {
      ctx.session.orderData.isClient = ctx.update.message.text;
      await ctx.replyWithHTML(
        `<b>–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É—Ç–ª—ñ–≤</b>`,
        Markup.keyboard(
          ctx.session.selectedRegion.minQty > 1
            ? [
                ["2", "3"],
                ["4", "5", "6"],
                ["7", "8", "9"],
              ]
            : [
                ["1", "2", "3"],
                ["4", "5", "6"],
                ["7", "8", "9"],
              ]
        )
          .oneTime()
          .resize()
          .extra()
      );
      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ", e);
    }
  },
  // —Ç–∞—Ä–∞
  async (ctx) => {
    try {
      ctx.session.orderData.qty = +ctx.update.message.text;

      ctx.session.selectedRegion.accessory =
        await prisma.akvasanaAccessory.findMany();

      await ctx.replyWithHTML(
        `üí∞${(ctx.session.orderData.total =
          ctx.session.orderData.qty *
          ctx.session.orderData.total)}–≥—Ä–Ω<b>\n–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≤–∞–º —Ç–∞—Ä–∞?</b>\n<i>(${
          ctx.session.selectedRegion.accessory[0]?.cost
        } –≥—Ä–Ω/–±—É—Ç–µ–ª—å)</i>`,
        Markup.keyboard([["–¢–∞–∫", "–ù—ñ"]])
          .resize()
          .extra()
      );
      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–∞—Ä–∏", e);
    }
  },
  // –ø–æ–º–ø–∞
  async (ctx) => {
    try {
      ctx.session.orderData.bottle = ctx.update.message.text;
      await ctx.replyWithHTML(
        `üí∞${(ctx.session.orderData.total =
          ctx.session.orderData.total +
          ctx.session.orderData.qty *
            (ctx.session.orderData.bottle === "–¢–∞–∫"
              ? ctx.session.selectedRegion.accessory[0]?.cost
              : 0))}–≥—Ä–Ω\n<b>–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≤–∞–º –ø–æ–º–ø–∞? </b>\n<i>(${
          ctx.session.selectedRegion.accessory[1]?.cost
        }–≥—Ä–Ω/—à—Ç)</i>`,
        Markup.keyboard([["–¢–∞–∫", "–ù—ñ"]])
          .oneTime()
          .resize()
          .extra()
      );
      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ø–æ–º–ø–∏", e);
    }
  },
  // –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  async (ctx) => {
    try {
      ctx.session.orderData.pomp = ctx.update.message.text;
      await ctx.replyWithHTML(
        `üí∞${(ctx.session.orderData.total =
          ctx.session.orderData.total +
          (ctx.session.orderData.pomp === "–¢–∞–∫"
            ? ctx.session.selectedRegion.accessory[1]?.cost
            : 0))}–≥—Ä–Ω\n<b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</b>`,
        Markup.keyboard([["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–°–∫–∞—Å—É–≤–∞—Ç–∏"]])
          .oneTime()
          .resize()
          .extra()
      );
      ctx.session.orderData.app = "TELEGRAM";

      return ctx.wizard.next();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ", e);
    }
  },
  // –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
  async (ctx) => {
    try {
      if (ctx.update.message.text === "–°–∫–∞—Å—É–≤–∞—Ç–∏") {
        await ctx.reply(
          `–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start`,
          Markup.keyboard(["/start"]).oneTime().resize().extra()
        );
        return ctx.scene.leave();
      }

      console.log({orderData:ctx.session.orderData})

      // addOrderToDB(ctx.session.orderData);
      const sendedOrder = sendOrderEmail(ctx.session.orderData);

      const addedOrder = await prisma.akvasanaOrders.create({
        data: ctx.session.orderData,
      });

      console.log({addedOrder})



      await ctx.reply(
        `–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ù–µ–∑–∞–±–∞—Ä–æ–º –º–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏. –°–ª–∞–≤–∞ –ó–°–£!`
      );
      return ctx.scene.leave();
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ë–î –∞–±–æ –∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é email", e);
    }
  }
);

// async..await is not allowed in global scope, must use a wrapper
const sendOrderEmail = async (data) => {
  const date = new Date().toLocaleString("uk-UK");
  console.log({ 'sendOrderEmail data':data });
  // create reusable transporter object using the default SMTP transport
  const transporter = nodemailer.createTransport({
    host: "smtp.ukr.net",
    port: 465,
    secure: false,
    auth: {
      user: "volodamir69@ukr.net",
      pass: "hR0xwhHUXwy25soJ",
    },
  });
console.log({transporter})
  // send mail with defined transport object
  let info = await transporter.sendMail({
    from: '"–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç üëª" <volodamir69@ukr.net>', // sender address
    to: data.address !== "test" ? "akvasana@ukr.net" : "volodamir69@ukr.net", // list of receivers
    subject: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¢–µ–ª–µ–≥—Ä–∞–º—É ${date}`, // Subject line
    html: `<p style="font-size:16px;">
      
        –î–∞—Ç–∞: <b>${date}</b><br>
        –†–∞–π–æ–Ω: <b>${data.regionName}</b><br>
        –ê–¥—Ä–µ—Å–∞: <b>${data.address}</b><br>
        –¢–µ–ª–µ—Ñ–æ–Ω: <b><a href="tel:${data.phone}">${data.phone}</a></b><br>
        –ö–ª—ñ—î–Ω—Ç?: <b>${data.isClient}</b><br>
        –ö—ñ–ª—å–∫—ñ—Å—Ç—å: <b>${data.qty}</b><br>
        –¢–∞—Ä–∞: <b>${data.bottle}</b><br>
        –ü–æ–º–ø–∞: <b>${data.bottle}</b><br>
        –°—É–º–∞: <b>${data.total}</b><br>
      
    </p>`,
  },(error)=>console.log({transporterError:error}));

  if (info.messageId) {
     console.log({messageId:info.messageId});
   return {
      statusCode: 200,
      body: nodemailer.getTestMessageUrl(info),
    };
  }
console.log({info});
  return {
    statusCode: 400,
    body: "Oops",
  };
};